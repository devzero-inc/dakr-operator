# Dockerfile for Container-Optimized OS (COS) builds
# COS is Google's lightweight, security-focused Linux distribution for containers

ARG OS_VERSION=stable
ARG TARGET_ARCH=amd64

# COS doesn't have public container images, so we'll use a Ubuntu base with COS-specific build environment
FROM ubuntu:22.04 AS builder

ARG CRIU_VERSION=v4.1
ARG NETAVARK_VERSION=v1.15.2
ARG TARGET_ARCH=amd64
ARG OS_VERSION=stable

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

LABEL builder=dakr-snapshot-tools
LABEL os=cos
LABEL version=${OS_VERSION}
LABEL arch=${TARGET_ARCH}

# Install build dependencies for COS (similar to Ubuntu but with some COS-specific considerations)
RUN export DEBIAN_FRONTEND=noninteractive && \
    apt-get update && \
    apt-get install -y \
        build-essential \
        pkg-config \
        git \
        curl \
        wget \
        ca-certificates \
        libnl-3-dev \
        libnet1-dev \
        libbsd-dev \
        libprotobuf-dev \
        libprotobuf-c-dev \
        protobuf-c-compiler \
        protobuf-compiler \
        python3-protobuf \
        libnftables-dev \
        libcap-dev \
        libaio-dev \
        libgnutls28-dev \
        uuid-dev \
        python3 \
        python3-pip \
        python3-yaml \
        asciidoc \
        xmlto \
        libdrm-dev \
        libnl-route-3-dev \
        rustc \
        cargo \
        && \
    rm -rf /var/lib/apt/lists/*

# Install Rust (required for Netavark)
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Set up cross-compilation if needed
RUN if [ "${TARGET_ARCH}" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then \
        export DEBIAN_FRONTEND=noninteractive && \
        apt-get update && \
        apt-get install -y gcc-aarch64-linux-gnu && \
        rustup target add aarch64-unknown-linux-gnu && \
        rm -rf /var/lib/apt/lists/* ; \
    elif [ "${TARGET_ARCH}" = "amd64" ] && [ "$(uname -m)" = "aarch64" ]; then \
        export DEBIAN_FRONTEND=noninteractive && \
        apt-get update && \
        apt-get install -y gcc-x86-64-linux-gnu && \
        rustup target add x86_64-unknown-linux-gnu && \
        rm -rf /var/lib/apt/lists/* ; \
    fi

# Build CRIU
WORKDIR /build
RUN git clone https://github.com/checkpoint-restore/criu.git && \
    cd criu && \
    git checkout ${CRIU_VERSION} && \
    if [ "${TARGET_ARCH}" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then \
        make ARCH=aarch64 CC=aarch64-linux-gnu-gcc -j$(nproc) ; \
    elif [ "${TARGET_ARCH}" = "amd64" ] && [ "$(uname -m)" = "aarch64" ]; then \
        make ARCH=x86_64 CC=x86_64-linux-gnu-gcc -j$(nproc) ; \
    else \
        make -j$(nproc) ; \
    fi

# Build Netavark
RUN git clone https://github.com/containers/netavark.git && \
    cd netavark && \
    git checkout ${NETAVARK_VERSION} && \
    if [ "${TARGET_ARCH}" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then \
        cargo build --release --target aarch64-unknown-linux-gnu ; \
    elif [ "${TARGET_ARCH}" = "amd64" ] && [ "$(uname -m)" = "aarch64" ]; then \
        cargo build --release --target x86_64-unknown-linux-gnu ; \
    else \
        cargo build --release ; \
    fi

# Create output directory and copy binaries
RUN mkdir -p /output/cos-${OS_VERSION}-${TARGET_ARCH} && \
    # Copy CRIU binary
    cp /build/criu/criu/criu /output/cos-${OS_VERSION}-${TARGET_ARCH}/ && \
    # Copy Netavark binary (handle cross-compilation paths)
    if [ "${TARGET_ARCH}" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then \
        cp /build/netavark/target/aarch64-unknown-linux-gnu/release/netavark /output/cos-${OS_VERSION}-${TARGET_ARCH}/ ; \
    elif [ "${TARGET_ARCH}" = "amd64" ] && [ "$(uname -m)" = "aarch64" ]; then \
        cp /build/netavark/target/x86_64-unknown-linux-gnu/release/netavark /output/cos-${OS_VERSION}-${TARGET_ARCH}/ ; \
    else \
        cp /build/netavark/target/release/netavark /output/cos-${OS_VERSION}-${TARGET_ARCH}/ ; \
    fi

# Create dependency directory for shared libraries
RUN mkdir -p /output/cos-${OS_VERSION}-${TARGET_ARCH}/deps && \
    # Copy required shared libraries for CRIU
    ldd /output/cos-${OS_VERSION}-${TARGET_ARCH}/criu | grep "=> /" | awk '{print $3}' | grep -E "(libnl|libnet|libbsd|libprotobuf|libcap|libaio|libgnutls)" | xargs -I {} cp {} /output/cos-${OS_VERSION}-${TARGET_ARCH}/deps/ 2>/dev/null || true

# Verify binaries
RUN file /output/cos-${OS_VERSION}-${TARGET_ARCH}/criu && \
    file /output/cos-${OS_VERSION}-${TARGET_ARCH}/netavark && \
    # Test that binaries can show version (basic functionality test)
    /output/cos-${OS_VERSION}-${TARGET_ARCH}/criu --version && \
    /output/cos-${OS_VERSION}-${TARGET_ARCH}/netavark --version

# Create minimal runtime image for COS-specific optimizations
FROM ubuntu:22.04 AS runtime

ARG OS_VERSION=stable
ARG TARGET_ARCH=amd64

# Install minimal runtime dependencies for COS
RUN export DEBIAN_FRONTEND=noninteractive && \
    apt-get update && \
    apt-get install -y \
        libnl-3-200 \
        libnet1 \
        libbsd0 \
        libprotobuf23 \
        libprotobuf-c1 \
        libcap2 \
        libaio1 \
        libgnutls30 \
        libnftables1 \
        && \
    rm -rf /var/lib/apt/lists/* && \
    # Create COS-specific directory structure
    mkdir -p /etc/cos && \
    echo "Container-Optimized OS ${OS_VERSION}" > /etc/cos/version

# Copy binaries from builder
COPY --from=builder /output/cos-${OS_VERSION}-${TARGET_ARCH} /usr/local/bin/

# Set appropriate permissions
RUN chmod +x /usr/local/bin/criu /usr/local/bin/netavark

# Add COS-specific metadata
LABEL org.opencontainers.image.title="DAKR Snapshot Tools for Container-Optimized OS"
LABEL org.opencontainers.image.description="CRIU and Netavark binaries optimized for Google Container-Optimized OS"
LABEL org.opencontainers.image.version="${OS_VERSION}"
LABEL org.opencontainers.image.vendor="DAKR Project"
LABEL cos.version="${OS_VERSION}"
LABEL target.architecture="${TARGET_ARCH}"

# Verify installation
RUN /usr/local/bin/criu --version && \
    /usr/local/bin/netavark --version

CMD ["/bin/bash"]
