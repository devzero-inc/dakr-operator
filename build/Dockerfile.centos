# CentOS Stream Dockerfile for building CRIU and Netavark
ARG OS_VERSION=stream9
FROM quay.io/centos/centos:${OS_VERSION}

# Re-declare ARGs after FROM to make them available in this stage
ARG OS_VERSION=stream9
ARG CRIU_VERSION=latest
ARG NETAVARK_VERSION=latest
ARG TARGET_ARCH=amd64

# CentOS Stream repositories - only stream9 is currently supported
RUN if [ "${OS_VERSION}" = "stream9" ]; then \
        dnf config-manager --set-enabled crb || true; \
    else \
        echo "Error: CentOS Stream 8 has reached End of Life (May 31, 2024)." && \
        echo "Only CentOS Stream 9 is supported. Please use --version stream9" && \
        exit 1; \
    fi

# Install EPEL repository
RUN if [ "${OS_VERSION}" = "stream9" ]; then \
        dnf install -y epel-release; \
    fi

# Install base dependencies
RUN if [ "${OS_VERSION}" = "stream9" ]; then \
        echo "Installing packages for CentOS Stream ${OS_VERSION}..." && \
        dnf groupinstall -y "Development Tools" && \
        dnf install -y \
            pkg-config \
            git \
            curl \
            wget \
            python3 \
            python3-devel \
            python3-pip \
            protobuf-devel \
            protobuf-c-devel \
            libnl3-devel \
            libnet-devel \
            libcap-devel \
            libaio-devel \
            gnutls-devel \
            libdrm-devel \
            python3-protobuf \
            asciidoc \
            xmlto \
            ca-certificates \
            jq && \
        echo "Package installation completed for CentOS Stream ${OS_VERSION}"; \
    else \
        echo "Unsupported CentOS version: '${OS_VERSION}'" && \
        exit 1; \
    fi

# Verify git installation
RUN command -v git && git --version

# Install Rust for Netavark
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Set up cross-compilation if needed
RUN if [ "$TARGET_ARCH" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then \
        if [ "${OS_VERSION}" = "stream9" ]; then \
            dnf install -y gcc-aarch64-linux-gnu; \
        fi && \
        rustup target add aarch64-unknown-linux-gnu; \
    elif [ "$TARGET_ARCH" = "amd64" ] && [ "$(uname -m)" = "aarch64" ]; then \
        if [ "${OS_VERSION}" = "stream9" ]; then \
            dnf install -y gcc-x86_64-linux-gnu; \
        fi && \
        rustup target add x86_64-unknown-linux-gnu; \
    fi

WORKDIR /build

# Build CRIU
RUN mkdir -p criu && cd criu && \
    if [ "$CRIU_VERSION" = "latest" ]; then \
        CRIU_VERSION=$(curl -s https://api.github.com/repos/checkpoint-restore/criu/releases/latest | jq -r '.tag_name // empty' | head -1); \
        if [ -z "$CRIU_VERSION" ] || [ "$CRIU_VERSION" = "null" ]; then \
            CRIU_VERSION=$(curl -s https://api.github.com/repos/checkpoint-restore/criu/releases/latest | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4); \
        fi; \
        if [ -z "$CRIU_VERSION" ] || [ "$CRIU_VERSION" = "null" ]; then \
            echo "Warning: Could not fetch latest CRIU version, using v4.1 as fallback"; \
            CRIU_VERSION="v4.1"; \
        fi; \
    fi && \
    echo "Building CRIU version: $CRIU_VERSION" && \
    git clone --depth 1 --branch "$CRIU_VERSION" https://github.com/checkpoint-restore/criu.git . && \
    if [ "$TARGET_ARCH" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then \
        export CC=aarch64-linux-gnu-gcc && export ARCH=arm64; \
    elif [ "$TARGET_ARCH" = "amd64" ] && [ "$(uname -m)" = "aarch64" ]; then \
        export CC=x86_64-linux-gnu-gcc && export ARCH=x86_64; \
    fi && \
    # Use optimized make build with parallel jobs and minimal targets
    make -j$(nproc) WERROR=0 V=1 criu && \
    make install-criu PREFIX=/usr/local DESTDIR=

# Build Netavark
RUN mkdir -p netavark && cd netavark && \
    if [ "$NETAVARK_VERSION" = "latest" ]; then \
        NETAVARK_VERSION=$(curl -s https://api.github.com/repos/containers/netavark/releases/latest | jq -r '.tag_name // empty' | head -1); \
        if [ -z "$NETAVARK_VERSION" ] || [ "$NETAVARK_VERSION" = "null" ]; then \
            NETAVARK_VERSION=$(curl -s https://api.github.com/repos/containers/netavark/releases/latest | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4); \
        fi; \
        if [ -z "$NETAVARK_VERSION" ] || [ "$NETAVARK_VERSION" = "null" ]; then \
            echo "Warning: Could not fetch latest Netavark version, using v1.15.2 as fallback"; \
            NETAVARK_VERSION="v1.15.2"; \
        fi; \
    fi && \
    echo "Building Netavark version: $NETAVARK_VERSION" && \
    git clone --depth 1 --branch "$NETAVARK_VERSION" https://github.com/containers/netavark.git . && \
    # Optimize Rust compilation
    echo '[profile.release]' > Cargo.toml.append && \
    echo 'opt-level = 3' >> Cargo.toml.append && \
    echo 'lto = "thin"' >> Cargo.toml.append && \
    echo 'codegen-units = 1' >> Cargo.toml.append && \
    echo 'panic = "abort"' >> Cargo.toml.append && \
    cat Cargo.toml >> Cargo.toml.append && \
    mv Cargo.toml.append Cargo.toml && \
    if [ "$TARGET_ARCH" = "arm64" ]; then \
        if [ "$(uname -m)" = "x86_64" ]; then \
            export CC=aarch64-linux-gnu-gcc && \
            RUSTFLAGS="-C target-cpu=native" cargo build --release --target aarch64-unknown-linux-gnu; \
        else \
            RUSTFLAGS="-C target-cpu=native" cargo build --release; \
        fi \
    elif [ "$TARGET_ARCH" = "amd64" ]; then \
        if [ "$(uname -m)" = "aarch64" ]; then \
            export CC=x86_64-linux-gnu-gcc && \
            RUSTFLAGS="-C target-cpu=native" cargo build --release --target x86_64-unknown-linux-gnu; \
        else \
            RUSTFLAGS="-C target-cpu=native" cargo build --release; \
        fi \
    else \
        RUSTFLAGS="-C target-cpu=native" cargo build --release; \
    fi

# Create deps directory with any required libraries
RUN mkdir -p /build/deps && \
    if [ "$TARGET_ARCH" = "arm64" ]; then \
        cp -r /usr/lib64/* /build/deps/ 2>/dev/null || true; \
    else \
        cp -r /usr/lib64/* /build/deps/ 2>/dev/null || true; \
    fi

CMD ["/bin/bash"]
