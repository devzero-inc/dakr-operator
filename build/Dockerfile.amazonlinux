# Amazon Linux Dockerfile for building CRIU and Netavark
ARG OS_VERSION=2023
FROM amazonlinux:${OS_VERSION}

# Re-declare ARG after FROM since ARGs before FROM are in a different scope
ARG OS_VERSION=2023
ARG CRIU_VERSION=latest
ARG NETAVARK_VERSION=latest
ARG TARGET_ARCH=amd64

# Install EPEL repository for Amazon Linux 2
RUN if [ "${OS_VERSION}" = "2" ]; then \
        yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm || \
        amazon-linux-extras install epel -y || \
        yum install -y epel-release || \
        echo "Warning: Could not install EPEL, continuing without it"; \
    fi

# Debug: Show the OS_VERSION being used
RUN echo "Building for Amazon Linux version: ${OS_VERSION}"

# Install base dependencies
RUN if [ "${OS_VERSION}" = "2023" ]; then \
        dnf update -y && \
        dnf groupinstall -y "Development Tools" && \
        dnf install -y --allowerasing \
            git \
            pkg-config \
            curl \
            wget \
            python3 \
            python3-devel \
            python3-pip \
            protobuf-devel \
            protobuf-c-devel \
            libnl3-devel \
            libnet-devel \
            libcap-devel \
            libaio-devel \
            gnutls-devel \
            libdrm-devel \
            python3-protobuf \
            asciidoc \
            xmlto \
            ca-certificates \
            jq && \
        dnf clean all; \
    elif [ "${OS_VERSION}" = "2" ]; then \
        yum update -y && \
        yum groupinstall -y "Development Tools" && \
        yum install -y \
            git \
            pkg-config \
            curl \
            wget \
            python3 \
            python3-devel \
            python3-pip \
            libnl3-devel \
            libnet-devel \
            libcap-devel \
            libaio-devel \
            gnutls-devel \
            python3-protobuf \
            asciidoc \
            xmlto \
            ca-certificates \
            autoconf \
            automake \
            libtool \
            unzip && \
        yum clean all && \
        echo "Installing modern protobuf with proper development files..." && \
        cd /tmp && \
        # Install protobuf with all necessary files
        curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protobuf-all-21.12.tar.gz && \
        tar -xzf protobuf-all-21.12.tar.gz && \
        cd protobuf-21.12 && \
        ./configure --prefix=/usr/local && \
        make -j$(nproc) && \
        make install && \
        echo "/usr/local/lib" > /etc/ld.so.conf.d/protobuf.conf && \
        ldconfig && \
        # Ensure proto files are in the right location
        mkdir -p /usr/local/include/google/protobuf && \
        cp -r src/google/protobuf/*.proto /usr/local/include/google/protobuf/ && \
        # Also copy to standard system location
        mkdir -p /usr/include/google/protobuf && \
        cp -r src/google/protobuf/*.proto /usr/include/google/protobuf/ && \
        cd /tmp && \
        # Now install protobuf-c which depends on protobuf
        curl -LO https://github.com/protobuf-c/protobuf-c/releases/download/v1.4.1/protobuf-c-1.4.1.tar.gz && \
        tar -xzf protobuf-c-1.4.1.tar.gz && \
        cd protobuf-c-1.4.1 && \
        PKG_CONFIG_PATH=/usr/local/lib/pkgconfig ./configure --prefix=/usr/local && \
        make -j$(nproc) && \
        make install && \
        ldconfig && \
        cd /tmp && \
        rm -rf protobuf-21.12 protobuf-all-21.12.tar.gz protobuf-c-1.4.1 protobuf-c-1.4.1.tar.gz && \
        # Verify installations
        /usr/local/bin/protoc --version && \
        /usr/local/bin/protoc-c --version && \
        ls -la /usr/local/include/google/protobuf/ && \
        ls -la /usr/include/google/protobuf/; \
    else \
        echo "Unsupported Amazon Linux version: ${OS_VERSION}" && \
        exit 1; \
    fi

# Verify git installation
RUN command -v git && git --version

# Install jq for Amazon Linux 2 (not available in base repos)
RUN if [ "${OS_VERSION}" = "2" ]; then \
        curl -L -o /usr/local/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && \
        chmod +x /usr/local/bin/jq; \
    fi

# Install Rust for Netavark
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/usr/local/bin:/root/.cargo/bin:${PATH}"

# Set up cross-compilation if needed
RUN if [ "$TARGET_ARCH" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then \
        if [ "${OS_VERSION}" = "2023" ]; then \
            dnf install -y gcc-aarch64-linux-gnu || true; \
        fi && \
        rustup target add aarch64-unknown-linux-gnu; \
    elif [ "$TARGET_ARCH" = "amd64" ] && [ "$(uname -m)" = "aarch64" ]; then \
        if [ "${OS_VERSION}" = "2023" ]; then \
            dnf install -y gcc-x86_64-linux-gnu || true; \
        fi && \
        rustup target add x86_64-unknown-linux-gnu; \
    fi

# Verify protoc installation and version
RUN command -v protoc && protoc --version && echo "protoc verification successful"

# Verify protoc-c installation for AL2
RUN if [ "${OS_VERSION}" = "2" ]; then \
        echo "Verifying protobuf installation..." && \
        command -v protoc && protoc --version && \
        command -v protoc-c && protoc-c --version && \
        echo "Checking for descriptor.proto..." && \
        find /usr -name "descriptor.proto" 2>/dev/null | head -5 && \
        echo "protobuf verification successful"; \
    fi

WORKDIR /build

# Build CRIU
RUN mkdir -p criu && cd criu && \
    if [ "$CRIU_VERSION" = "latest" ]; then \
        CRIU_VERSION=$(curl -s https://api.github.com/repos/checkpoint-restore/criu/releases/latest | jq -r '.tag_name // empty' | head -1); \
        if [ -z "$CRIU_VERSION" ] || [ "$CRIU_VERSION" = "null" ]; then \
            CRIU_VERSION=$(curl -s https://api.github.com/repos/checkpoint-restore/criu/releases/latest | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4); \
        fi; \
        if [ -z "$CRIU_VERSION" ] || [ "$CRIU_VERSION" = "null" ]; then \
            echo "Warning: Could not fetch latest CRIU version, using v3.19 as fallback"; \
            CRIU_VERSION="v3.19"; \
        fi; \
    fi && \
    echo "Building CRIU version: $CRIU_VERSION" && \
    echo "OS_VERSION is: ${OS_VERSION}" && \
    git clone --depth 1 --branch "$CRIU_VERSION" https://github.com/checkpoint-restore/criu.git . && \
    # Check for descriptor.proto and create symlink if needed
    echo "Checking for descriptor.proto..." && \
    find /usr -name "descriptor.proto" 2>/dev/null | head -5 && \
    DESCRIPTOR_PATH=$(find /usr -name "descriptor.proto" 2>/dev/null | head -1) && \
    if [ -n "$DESCRIPTOR_PATH" ]; then \
        echo "Found descriptor.proto at: $DESCRIPTOR_PATH" && \
        mkdir -p images/google/protobuf && \
        ln -sf "$DESCRIPTOR_PATH" images/google/protobuf/descriptor.proto && \
        echo "Created symlink to system descriptor.proto"; \
    else \
        echo "No descriptor.proto found - this might cause build issues"; \
    fi && \
    # Use optimized make build with parallel jobs and minimal targets
    make -j$(nproc) WERROR=0 V=1 criu && \
    make install-criu PREFIX=/usr/local DESTDIR=

# Build Netavark
RUN mkdir -p netavark && cd netavark && \
    if [ "$NETAVARK_VERSION" = "latest" ]; then \
        NETAVARK_VERSION=$(curl -s https://api.github.com/repos/containers/netavark/releases/latest | jq -r '.tag_name // empty' | head -1); \
        if [ -z "$NETAVARK_VERSION" ] || [ "$NETAVARK_VERSION" = "null" ]; then \
            NETAVARK_VERSION=$(curl -s https://api.github.com/repos/containers/netavark/releases/latest | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4); \
        fi; \
        if [ -z "$NETAVARK_VERSION" ] || [ "$NETAVARK_VERSION" = "null" ]; then \
            echo "Warning: Could not fetch latest Netavark version, using v1.7.0 as fallback"; \
            NETAVARK_VERSION="v1.7.0"; \
        fi; \
    fi && \
    echo "Building Netavark version: $NETAVARK_VERSION" && \
    git clone --depth 1 --branch "$NETAVARK_VERSION" https://github.com/containers/netavark.git . && \
    # Optimize Rust compilation
    echo '[profile.release]' > Cargo.toml.append && \
    echo 'opt-level = 3' >> Cargo.toml.append && \
    echo 'lto = "thin"' >> Cargo.toml.append && \
    echo 'codegen-units = 1' >> Cargo.toml.append && \
    echo 'panic = "abort"' >> Cargo.toml.append && \
    cat Cargo.toml >> Cargo.toml.append && \
    mv Cargo.toml.append Cargo.toml && \
    if [ "$TARGET_ARCH" = "arm64" ]; then \
        if [ "$(uname -m)" = "x86_64" ]; then \
            export CC=aarch64-linux-gnu-gcc && \
            RUSTFLAGS="-C target-cpu=native" cargo build --release --target aarch64-unknown-linux-gnu; \
        else \
            RUSTFLAGS="-C target-cpu=native" cargo build --release; \
        fi \
    elif [ "$TARGET_ARCH" = "amd64" ]; then \
        if [ "$(uname -m)" = "aarch64" ]; then \
            export CC=x86_64-linux-gnu-gcc && \
            RUSTFLAGS="-C target-cpu=native" cargo build --release --target x86_64-unknown-linux-gnu; \
        else \
            RUSTFLAGS="-C target-cpu=native" cargo build --release; \
        fi \
    else \
        RUSTFLAGS="-C target-cpu=native" cargo build --release; \
    fi

# Create deps directory with any required libraries
RUN mkdir -p /build/deps && \
    cp -r /usr/lib64/* /build/deps/ 2>/dev/null || true

# Copy binaries to standard locations
RUN cp /usr/local/bin/criu /usr/local/bin/criu-final 2>/dev/null || true
RUN find /build/netavark/target -name netavark -type f -executable -exec cp {} /usr/local/bin/netavark-final \; 2>/dev/null || true

CMD ["/bin/bash"]