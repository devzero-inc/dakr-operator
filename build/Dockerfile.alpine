# Alpine Dockerfile for building CRIU and Netavark
ARG OS_VERSION=3.19
FROM alpine:${OS_VERSION}

ARG CRIU_VERSION=latest
ARG NETAVARK_VERSION=latest
ARG TARGET_ARCH=amd64

# Install base dependencies
RUN apk add --no-cache \
    build-base \
    pkgconfig \
    git \
    curl \
    wget \
    python3 \
    python3-dev \
    py3-pip \
    protobuf-dev \
    protobuf-c-dev \
    libnl3-dev \
    libnet-dev \
    libcap-dev \
    linux-headers \
    gnutls-dev \
    nftables-dev \
    libdrm-dev \
    py3-protobuf \
    asciidoc \
    xmlto \
    ca-certificates \
    musl-dev \
    jq

# Install Rust for Netavark
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Set up cross-compilation if needed
RUN if [ "$TARGET_ARCH" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then \
        rustup target add aarch64-unknown-linux-musl; \
    elif [ "$TARGET_ARCH" = "amd64" ] && [ "$(uname -m)" = "aarch64" ]; then \
        rustup target add x86_64-unknown-linux-musl; \
    fi

WORKDIR /build

# Build CRIU
RUN mkdir -p criu && cd criu && \
    if [ "$CRIU_VERSION" = "latest" ]; then \
        CRIU_VERSION=$(curl -s https://api.github.com/repos/checkpoint-restore/criu/releases/latest | jq -r '.tag_name // empty' | head -1); \
        if [ -z "$CRIU_VERSION" ] || [ "$CRIU_VERSION" = "null" ]; then \
            CRIU_VERSION=$(curl -s https://api.github.com/repos/checkpoint-restore/criu/releases/latest | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4); \
        fi; \
        if [ -z "$CRIU_VERSION" ] || [ "$CRIU_VERSION" = "null" ]; then \
            echo "Warning: Could not fetch latest CRIU version, using v3.19 as fallback"; \
            CRIU_VERSION="v3.19"; \
        fi; \
    fi && \
    echo "Building CRIU version: $CRIU_VERSION" && \
    git clone --depth 1 --branch "$CRIU_VERSION" https://github.com/checkpoint-restore/criu.git . && \
    # Alpine-specific build adjustments (avoid static linking issues)
    if [ "$TARGET_ARCH" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then \
        export ARCH=arm64; \
    elif [ "$TARGET_ARCH" = "amd64" ] && [ "$(uname -m)" = "aarch64" ]; then \
        export ARCH=x86_64; \
    fi && \
    # Use optimized make build with parallel jobs and minimal targets
    make -j$(nproc) WERROR=0 V=1 criu && \
    make install-criu PREFIX=/usr/local DESTDIR=

# Build Netavark
RUN mkdir -p netavark && cd netavark && \
    if [ "$NETAVARK_VERSION" = "latest" ]; then \
        NETAVARK_VERSION=$(curl -s https://api.github.com/repos/containers/netavark/releases/latest | jq -r '.tag_name // empty' | head -1); \
        if [ -z "$NETAVARK_VERSION" ] || [ "$NETAVARK_VERSION" = "null" ]; then \
            NETAVARK_VERSION=$(curl -s https://api.github.com/repos/containers/netavark/releases/latest | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4); \
        fi; \
        if [ -z "$NETAVARK_VERSION" ] || [ "$NETAVARK_VERSION" = "null" ]; then \
            echo "Warning: Could not fetch latest Netavark version, using v1.7.0 as fallback"; \
            NETAVARK_VERSION="v1.7.0"; \
        fi; \
    fi && \
    echo "Building Netavark version: $NETAVARK_VERSION" && \
    git clone --depth 1 --branch "$NETAVARK_VERSION" https://github.com/containers/netavark.git . && \
    # Optimize Rust compilation
    echo '[profile.release]' > Cargo.toml.append && \
    echo 'opt-level = 3' >> Cargo.toml.append && \
    echo 'lto = "thin"' >> Cargo.toml.append && \
    echo 'codegen-units = 1' >> Cargo.toml.append && \
    echo 'panic = "abort"' >> Cargo.toml.append && \
    cat Cargo.toml >> Cargo.toml.append && \
    mv Cargo.toml.append Cargo.toml && \
    # Use musl target for Alpine with optimizations
    if [ "$TARGET_ARCH" = "arm64" ]; then \
        if [ "$(uname -m)" = "x86_64" ]; then \
            RUSTFLAGS="-C target-cpu=native" cargo build --release --target aarch64-unknown-linux-musl; \
        else \
            RUSTFLAGS="-C target-cpu=native" cargo build --release --target aarch64-unknown-linux-musl; \
        fi \
    elif [ "$TARGET_ARCH" = "amd64" ]; then \
        if [ "$(uname -m)" = "aarch64" ]; then \
            RUSTFLAGS="-C target-cpu=native" cargo build --release --target x86_64-unknown-linux-musl; \
        else \
            RUSTFLAGS="-C target-cpu=native" cargo build --release --target x86_64-unknown-linux-musl; \
        fi \
    else \
        # Default to musl for Alpine
        if [ "$(uname -m)" = "x86_64" ]; then \
            RUSTFLAGS="-C target-cpu=native" cargo build --release --target x86_64-unknown-linux-musl; \
        else \
            RUSTFLAGS="-C target-cpu=native" cargo build --release --target aarch64-unknown-linux-musl; \
        fi \
    fi

# Create deps directory with any required libraries
RUN mkdir -p /build/deps && \
    cp -r /usr/lib/* /build/deps/ 2>/dev/null || true && \
    cp -r /lib/* /build/deps/ 2>/dev/null || true

CMD ["/bin/sh"]
